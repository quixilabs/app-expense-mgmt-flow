generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model transactions {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date           DateTime    @db.Date
  description    String
  card_member    String?
  account_number String?
  amount         Decimal     @db.Decimal(10, 2)
  business_id    String?     @db.Uuid
  category       String?
  created_at     DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?   @default(now()) @updatedAt @db.Timestamptz(6)
  reviewed       Boolean?    @default(false)
  business       businesses? @relation(fields: [business_id], references: [id], onUpdate: NoAction, map: "fk_transaction_business")

  @@index([business_id], map: "idx_transactions_business_id")
  @@index([date], map: "idx_transactions_date")
}

model businesses {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String         @unique
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)
  rules        rules[]
  transactions transactions[]
}

model rules {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pattern     String
  business_id String     @db.Uuid
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @default(now()) @updatedAt @db.Timestamptz(6)
  business    businesses @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([pattern], map: "idx_rules_pattern")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model plaid_tokens {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String    @unique
  access_token String
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
}
